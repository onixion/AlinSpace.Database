// <auto-generated />
using System;
using AlinSpace.Database.Feuer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AlinSpace.Database.Feuer.Console.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210703174118_M001-Initial")]
    partial class M001Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.Configuration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AboutPageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactPageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IndexPageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AboutPageId");

                    b.HasIndex("ContactPageId");

                    b.HasIndex("IndexPageId");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.Page", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BodyHtml")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsListed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PageGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PageGroupId");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.PageGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsListed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("PageGroup");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsListed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PageId")
                        .HasColumnType("bigint");

                    b.Property<long>("Priority")
                        .HasColumnType("bigint");

                    b.Property<string>("RepositoryUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PageId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.Tag", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<long?>("PageGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PageId")
                        .HasColumnType("bigint");

                    b.HasKey("Name");

                    b.HasIndex("PageGroupId");

                    b.HasIndex("PageId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.Configuration", b =>
                {
                    b.HasOne("AlinSpace.Database.Feuer.Models.Page", "AboutPage")
                        .WithMany()
                        .HasForeignKey("AboutPageId");

                    b.HasOne("AlinSpace.Database.Feuer.Models.Page", "ContactPage")
                        .WithMany()
                        .HasForeignKey("ContactPageId");

                    b.HasOne("AlinSpace.Database.Feuer.Models.Page", "IndexPage")
                        .WithMany()
                        .HasForeignKey("IndexPageId");

                    b.Navigation("AboutPage");

                    b.Navigation("ContactPage");

                    b.Navigation("IndexPage");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.Page", b =>
                {
                    b.HasOne("AlinSpace.Database.Feuer.Models.User", "Owner")
                        .WithMany("Pages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlinSpace.Database.Feuer.Models.PageGroup", null)
                        .WithMany("Pages")
                        .HasForeignKey("PageGroupId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.PageGroup", b =>
                {
                    b.HasOne("AlinSpace.Database.Feuer.Models.User", "Owner")
                        .WithMany("PageGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.Project", b =>
                {
                    b.HasOne("AlinSpace.Database.Feuer.Models.User", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlinSpace.Database.Feuer.Models.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("Owner");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.Tag", b =>
                {
                    b.HasOne("AlinSpace.Database.Feuer.Models.PageGroup", null)
                        .WithMany("Tags")
                        .HasForeignKey("PageGroupId");

                    b.HasOne("AlinSpace.Database.Feuer.Models.Page", null)
                        .WithMany("Tags")
                        .HasForeignKey("PageId");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.Page", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.PageGroup", b =>
                {
                    b.Navigation("Pages");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("AlinSpace.Database.Feuer.Models.User", b =>
                {
                    b.Navigation("PageGroups");

                    b.Navigation("Pages");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
